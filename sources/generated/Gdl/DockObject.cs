// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdl {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DockObject : Gtk.Container {

		public DockObject (IntPtr raw) : base(raw) {}

		protected DockObject() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_get_name(IntPtr raw);

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_set_name(IntPtr raw, IntPtr name);

		[GLib.Property ("name")]
		public new string Name {
			get  {
				IntPtr raw_ret = gdl_dock_object_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdl_dock_object_set_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_get_long_name(IntPtr raw);

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_set_long_name(IntPtr raw, IntPtr name);

		[GLib.Property ("long-name")]
		public string LongName {
			get  {
				IntPtr raw_ret = gdl_dock_object_get_long_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdl_dock_object_set_long_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_get_stock_id(IntPtr raw);

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_set_stock_id(IntPtr raw, IntPtr stock_id);

		[GLib.Property ("stock-id")]
		public string StockId {
			get  {
				IntPtr raw_ret = gdl_dock_object_get_stock_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdl_dock_object_set_stock_id(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("pixbuf-icon")]
		public IntPtr PixbufIcon {
			get {
				GLib.Value val = GetProperty ("pixbuf-icon");
				IntPtr ret = (IntPtr) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("pixbuf-icon", val);
				val.Dispose ();
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_get_master(IntPtr raw);

		[GLib.Property ("master")]
		public GLib.Object Master {
			get  {
				IntPtr raw_ret = gdl_dock_object_get_master(Handle);
				GLib.Object ret = GLib.Object.GetObject (raw_ret);
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("master", val);
				val.Dispose ();
			}
		}

		[GLib.Signal("detach")]
		public event Gdl.DetachedHandler Detached {
			add {
				this.AddSignalHandler ("detach", value, typeof (Gdl.DetachedArgs));
			}
			remove {
				this.RemoveSignalHandler ("detach", value);
			}
		}

		[GLib.Signal("dock")]
		public event Gdl.DockedHandler Docked {
			add {
				this.AddSignalHandler ("dock", value, typeof (Gdl.DockedArgs));
			}
			remove {
				this.RemoveSignalHandler ("dock", value);
			}
		}

		static DetachedNativeDelegate Detached_cb_delegate;
		static DetachedNativeDelegate DetachedVMCallback {
			get {
				if (Detached_cb_delegate == null)
					Detached_cb_delegate = new DetachedNativeDelegate (Detached_cb);
				return Detached_cb_delegate;
			}
		}

		static void OverrideDetached (GLib.GType gtype)
		{
			OverrideDetached (gtype, DetachedVMCallback);
		}

		static void OverrideDetached (GLib.GType gtype, DetachedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "detach", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DetachedNativeDelegate (IntPtr inst, bool recursive);

		static void Detached_cb (IntPtr inst, bool recursive)
		{
			try {
				DockObject __obj = GLib.Object.GetObject (inst, false) as DockObject;
				__obj.OnDetached (recursive);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdl.DockObject), ConnectionMethod="OverrideDetached")]
		protected virtual void OnDetached (bool recursive)
		{
			InternalDetached (recursive);
		}

		private void InternalDetached (bool recursive)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (recursive);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static DockedNativeDelegate Docked_cb_delegate;
		static DockedNativeDelegate DockedVMCallback {
			get {
				if (Docked_cb_delegate == null)
					Docked_cb_delegate = new DockedNativeDelegate (Docked_cb);
				return Docked_cb_delegate;
			}
		}

		static void OverrideDocked (GLib.GType gtype)
		{
			OverrideDocked (gtype, DockedVMCallback);
		}

		static void OverrideDocked (GLib.GType gtype, DockedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "dock", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DockedNativeDelegate (IntPtr inst, IntPtr requestor, int position, IntPtr other_data);

		static void Docked_cb (IntPtr inst, IntPtr requestor, int position, IntPtr other_data)
		{
			try {
				DockObject __obj = GLib.Object.GetObject (inst, false) as DockObject;
				__obj.OnDocked (GLib.Object.GetObject(requestor) as Gdl.DockObject, (Gdl.DockPlacement) position, (GLib.Value) Marshal.PtrToStructure (other_data, typeof (GLib.Value)));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdl.DockObject), ConnectionMethod="OverrideDocked")]
		protected virtual void OnDocked (Gdl.DockObject requestor, Gdl.DockPlacement position, GLib.Value other_data)
		{
			InternalDocked (requestor, position, other_data);
		}

		private void InternalDocked (Gdl.DockObject requestor, Gdl.DockPlacement position, GLib.Value other_data)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (4);
			GLib.Value[] vals = new GLib.Value [4];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (requestor);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (position);
			inst_and_params.Append (vals [2]);
			vals [3] = new GLib.Value (other_data);
			inst_and_params.Append (vals [3]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_bind(IntPtr raw, IntPtr master);

		public void Bind(GLib.Object master) {
			gdl_dock_object_bind(Handle, master == null ? IntPtr.Zero : master.Handle);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_object_child_placement(IntPtr raw, IntPtr child, out int placement);

		public bool ChildPlacement(Gdl.DockObject child, out Gdl.DockPlacement placement) {
			int native_placement;
			bool raw_ret = gdl_dock_object_child_placement(Handle, child == null ? IntPtr.Zero : child.Handle, out native_placement);
			bool ret = raw_ret;
			placement = (Gdl.DockPlacement) native_placement;
			return ret;
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_detach(IntPtr raw, bool recursive);

		public void Detach(bool recursive) {
			gdl_dock_object_detach(Handle, recursive);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_dock(IntPtr raw, IntPtr requestor, int position, IntPtr other_data);

		public void Dock(Gdl.DockObject requestor, Gdl.DockPlacement position, GLib.Value other_data) {
			IntPtr native_other_data = GLib.Marshaller.StructureToPtrAlloc (other_data);
			gdl_dock_object_dock(Handle, requestor == null ? IntPtr.Zero : requestor.Handle, (int) position, native_other_data);
			Marshal.FreeHGlobal (native_other_data);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_freeze(IntPtr raw);

		public void Freeze() {
			gdl_dock_object_freeze(Handle);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_get_controller(IntPtr raw);

		public Gdl.DockObject Controller { 
			get {
				IntPtr raw_ret = gdl_dock_object_get_controller(Handle);
				Gdl.DockObject ret = GLib.Object.GetObject(raw_ret) as Gdl.DockObject;
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_get_parent_object(IntPtr raw);

		public Gdl.DockObject ParentObject { 
			get {
				IntPtr raw_ret = gdl_dock_object_get_parent_object(Handle);
				Gdl.DockObject ret = GLib.Object.GetObject(raw_ret) as Gdl.DockObject;
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_get_pixbuf(IntPtr raw);

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_set_pixbuf(IntPtr raw, IntPtr icon);

		public Gdk.Pixbuf Pixbuf { 
			get {
				IntPtr raw_ret = gdl_dock_object_get_pixbuf(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
			set {
				gdl_dock_object_set_pixbuf(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_get_toplevel(IntPtr raw);

		public new Gdl.Dock Toplevel { 
			get {
				IntPtr raw_ret = gdl_dock_object_get_toplevel(Handle);
				Gdl.Dock ret = GLib.Object.GetObject(raw_ret) as Gdl.Dock;
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdl_dock_object_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_object_is_automatic(IntPtr raw);

		public bool IsAutomatic { 
			get {
				bool raw_ret = gdl_dock_object_is_automatic(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_object_is_bound(IntPtr raw);

		public bool IsBound { 
			get {
				bool raw_ret = gdl_dock_object_is_bound(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_object_is_closed(IntPtr raw);

		public bool IsClosed { 
			get {
				bool raw_ret = gdl_dock_object_is_closed(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_object_is_compound(IntPtr raw);

		public bool IsCompound { 
			get {
				bool raw_ret = gdl_dock_object_is_compound(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_object_is_frozen(IntPtr raw);

		public bool IsFrozen { 
			get {
				bool raw_ret = gdl_dock_object_is_frozen(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_layout_changed_notify(IntPtr raw);

		public void LayoutChangedNotify() {
			gdl_dock_object_layout_changed_notify(Handle);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_nick_from_type(IntPtr type);

		public static string NickFromType(GLib.GType type) {
			IntPtr raw_ret = gdl_dock_object_nick_from_type(type.Val);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_present(IntPtr raw, IntPtr child);

		public void Present(Gdl.DockObject child) {
			gdl_dock_object_present(Handle, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_reduce(IntPtr raw);

		public void Reduce() {
			gdl_dock_object_reduce(Handle);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_object_reorder(IntPtr raw, IntPtr child, int new_position, IntPtr other_data);

		public bool Reorder(Gdl.DockObject child, Gdl.DockPlacement new_position, GLib.Value other_data) {
			IntPtr native_other_data = GLib.Marshaller.StructureToPtrAlloc (other_data);
			bool raw_ret = gdl_dock_object_reorder(Handle, child == null ? IntPtr.Zero : child.Handle, (int) new_position, native_other_data);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_other_data);
			return ret;
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_set_manual(IntPtr raw);

		public void SetManual() {
			gdl_dock_object_set_manual(Handle);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_set_type_for_nick(IntPtr nick, IntPtr type);

		public static GLib.GType SetTypeForNick(string nick, GLib.GType type) {
			IntPtr native_nick = GLib.Marshaller.StringToPtrGStrdup (nick);
			IntPtr raw_ret = gdl_dock_object_set_type_for_nick(native_nick, type.Val);
			GLib.GType ret = new GLib.GType(raw_ret);
			GLib.Marshaller.Free (native_nick);
			return ret;
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_thaw(IntPtr raw);

		public void Thaw() {
			gdl_dock_object_thaw(Handle);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_object_type_from_nick(IntPtr nick);

		public static GLib.GType TypeFromNick(string nick) {
			IntPtr native_nick = GLib.Marshaller.StringToPtrGStrdup (nick);
			IntPtr raw_ret = gdl_dock_object_type_from_nick(native_nick);
			GLib.GType ret = new GLib.GType(raw_ret);
			GLib.Marshaller.Free (native_nick);
			return ret;
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_object_unbind(IntPtr raw);

		public void Unbind() {
			gdl_dock_object_unbind(Handle);
		}

#endregion
	}
}
