// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdl {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DockItemGrip : Gtk.Container {

		public DockItemGrip (IntPtr raw) : base(raw) {}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_item_grip_new(IntPtr item);

		public DockItemGrip (Gdl.DockItem item) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DockItemGrip)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (item != null) {
					names.Add ("item");
					vals.Add (new GLib.Value (item));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gdl_dock_item_grip_new(item == null ? IntPtr.Zero : item.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdlDockItemGripClass {
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Container)).GetClassSize ();
		static Dictionary<GLib.GType, GdlDockItemGripClass> class_structs;

		static GdlDockItemGripClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdlDockItemGripClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdlDockItemGripClass class_struct = (GdlDockItemGripClass) Marshal.PtrToStructure (class_ptr, typeof (GdlDockItemGripClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdlDockItemGripClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_item_grip_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdl_dock_item_grip_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_item_grip_has_event(IntPtr raw, IntPtr evnt);

		public bool HasEvent(Gdk.Event evnt) {
			bool raw_ret = gdl_dock_item_grip_has_event(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_grip_hide_handle(IntPtr raw);

		public void HideHandle() {
			gdl_dock_item_grip_hide_handle(Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_grip_set_cursor(IntPtr raw, bool in_drag);

		public bool Cursor { 
			set {
				gdl_dock_item_grip_set_cursor(Handle, value);
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_grip_set_label(IntPtr raw, IntPtr label);

		public Gtk.Widget Label { 
			set {
				gdl_dock_item_grip_set_label(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_grip_show_handle(IntPtr raw);

		public void ShowHandle() {
			gdl_dock_item_grip_show_handle(Handle);
		}

#endregion
	}
}
