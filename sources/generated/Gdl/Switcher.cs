// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdl {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Switcher : Gtk.Notebook {

		public Switcher (IntPtr raw) : base(raw) {}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_switcher_new();

		public Switcher () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Switcher)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gdl_switcher_new();
		}

		[GLib.Property ("switcher-style")]
		public Gdl.SwitcherStyle SwitcherStyle {
			get {
				GLib.Value val = GetProperty ("switcher-style");
				Gdl.SwitcherStyle ret = (Gdl.SwitcherStyle) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("switcher-style", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("tab-pos")]
		public new Gtk.PositionType TabPos {
			get {
				GLib.Value val = GetProperty ("tab-pos");
				Gtk.PositionType ret = (Gtk.PositionType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("tab-pos", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("tab-reorderable")]
		public bool TabReorderable {
			get {
				GLib.Value val = GetProperty ("tab-reorderable");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("tab-reorderable", val);
				val.Dispose ();
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_switcher_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdl_switcher_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdl_switcher_insert_page(IntPtr raw, IntPtr page, IntPtr tab_widget, IntPtr label, IntPtr tooltips, IntPtr stock_id, IntPtr pixbuf_icon, int position);

		public int InsertPage(Gtk.Widget page, Gtk.Widget tab_widget, string label, string tooltips, string stock_id, Gdk.Pixbuf pixbuf_icon, int position) {
			IntPtr native_label = GLib.Marshaller.StringToPtrGStrdup (label);
			IntPtr native_tooltips = GLib.Marshaller.StringToPtrGStrdup (tooltips);
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			int raw_ret = gdl_switcher_insert_page(Handle, page == null ? IntPtr.Zero : page.Handle, tab_widget == null ? IntPtr.Zero : tab_widget.Handle, native_label, native_tooltips, native_stock_id, pixbuf_icon == null ? IntPtr.Zero : pixbuf_icon.Handle, position);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_label);
			GLib.Marshaller.Free (native_tooltips);
			GLib.Marshaller.Free (native_stock_id);
			return ret;
		}

#endregion
	}
}
