// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdl {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DockItem : Gdl.DockObject {

		public DockItem (IntPtr raw) : base(raw) {}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_item_new(IntPtr name, IntPtr long_name, int behavior);

		public DockItem (string name, string long_name, Gdl.DockItemBehavior behavior) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DockItem)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("name");
				vals.Add (new GLib.Value (name));
				names.Add ("long_name");
				vals.Add (new GLib.Value (long_name));
				names.Add ("behavior");
				vals.Add (new GLib.Value (behavior));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_long_name = GLib.Marshaller.StringToPtrGStrdup (long_name);
			Raw = gdl_dock_item_new(native_name, native_long_name, (int) behavior);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_long_name);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_item_new_with_pixbuf_icon(IntPtr name, IntPtr long_name, IntPtr pixbuf_icon, int behavior);

		public DockItem (string name, string long_name, Gdk.Pixbuf pixbuf_icon, Gdl.DockItemBehavior behavior) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DockItem)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("name");
				vals.Add (new GLib.Value (name));
				names.Add ("long_name");
				vals.Add (new GLib.Value (long_name));
				if (pixbuf_icon != null) {
					names.Add ("pixbuf_icon");
					vals.Add (new GLib.Value (pixbuf_icon));
				}
				names.Add ("behavior");
				vals.Add (new GLib.Value (behavior));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_long_name = GLib.Marshaller.StringToPtrGStrdup (long_name);
			Raw = gdl_dock_item_new_with_pixbuf_icon(native_name, native_long_name, pixbuf_icon == null ? IntPtr.Zero : pixbuf_icon.Handle, (int) behavior);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_long_name);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_item_new_with_stock(IntPtr name, IntPtr long_name, IntPtr stock_id, int behavior);

		public DockItem (string name, string long_name, string stock_id, Gdl.DockItemBehavior behavior) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DockItem)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("name");
				vals.Add (new GLib.Value (name));
				names.Add ("long_name");
				vals.Add (new GLib.Value (long_name));
				names.Add ("stock_id");
				vals.Add (new GLib.Value (stock_id));
				names.Add ("behavior");
				vals.Add (new GLib.Value (behavior));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_long_name = GLib.Marshaller.StringToPtrGStrdup (long_name);
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			Raw = gdl_dock_item_new_with_stock(native_name, native_long_name, native_stock_id, (int) behavior);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_long_name);
			GLib.Marshaller.Free (native_stock_id);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdl_dock_item_get_orientation(IntPtr raw);

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_set_orientation(IntPtr raw, int orientation);

		[GLib.Property ("orientation")]
		public Gtk.Orientation Orientation {
			get  {
				int raw_ret = gdl_dock_item_get_orientation(Handle);
				Gtk.Orientation ret = (Gtk.Orientation) raw_ret;
				return ret;
			}
			set  {
				gdl_dock_item_set_orientation(Handle, (int) value);
			}
		}

		[GLib.Property ("resize")]
		public bool Resize {
			get {
				GLib.Value val = GetProperty ("resize");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("resize", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("behavior")]
		public Gdl.DockItemBehavior Behavior {
			get {
				GLib.Value val = GetProperty ("behavior");
				Gdl.DockItemBehavior ret = (Gdl.DockItemBehavior) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("behavior", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("locked")]
		public bool Locked {
			get {
				GLib.Value val = GetProperty ("locked");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("locked", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("preferred-width")]
		public int PreferredWidth {
			get {
				GLib.Value val = GetProperty ("preferred-width");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("preferred-width", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("preferred-height")]
		public int PreferredHeight {
			get {
				GLib.Value val = GetProperty ("preferred-height");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("preferred-height", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("iconified")]
		public bool Iconified {
			get {
				GLib.Value val = GetProperty ("iconified");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("iconified", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("closed")]
		public bool Closed {
			get {
				GLib.Value val = GetProperty ("closed");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("closed", val);
				val.Dispose ();
			}
		}

		[GLib.Signal("dock_drag_end")]
		public event Gdl.DockDragEndHandler DockDragEnd {
			add {
				this.AddSignalHandler ("dock_drag_end", value, typeof (Gdl.DockDragEndArgs));
			}
			remove {
				this.RemoveSignalHandler ("dock_drag_end", value);
			}
		}

		[GLib.Signal("dock-drag-begin")]
		public event System.EventHandler DockDragBegin {
			add {
				this.AddSignalHandler ("dock-drag-begin", value);
			}
			remove {
				this.RemoveSignalHandler ("dock-drag-begin", value);
			}
		}

		[GLib.Signal("selected")]
		public event System.EventHandler Selected {
			add {
				this.AddSignalHandler ("selected", value);
			}
			remove {
				this.RemoveSignalHandler ("selected", value);
			}
		}

		[GLib.Signal("dock-drag-motion")]
		public event Gdl.DockDragMotionHandler DockDragMotion {
			add {
				this.AddSignalHandler ("dock-drag-motion", value, typeof (Gdl.DockDragMotionArgs));
			}
			remove {
				this.RemoveSignalHandler ("dock-drag-motion", value);
			}
		}

		[GLib.Signal("deselected")]
		public event System.EventHandler Deselected {
			add {
				this.AddSignalHandler ("deselected", value);
			}
			remove {
				this.RemoveSignalHandler ("deselected", value);
			}
		}

		[GLib.Signal("move_focus_child")]
		public event Gdl.MoveFocusChildHandler MoveFocusChild {
			add {
				this.AddSignalHandler ("move_focus_child", value, typeof (Gdl.MoveFocusChildArgs));
			}
			remove {
				this.RemoveSignalHandler ("move_focus_child", value);
			}
		}

		static SelectedNativeDelegate Selected_cb_delegate;
		static SelectedNativeDelegate SelectedVMCallback {
			get {
				if (Selected_cb_delegate == null)
					Selected_cb_delegate = new SelectedNativeDelegate (Selected_cb);
				return Selected_cb_delegate;
			}
		}

		static void OverrideSelected (GLib.GType gtype)
		{
			OverrideSelected (gtype, SelectedVMCallback);
		}

		static void OverrideSelected (GLib.GType gtype, SelectedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "selected", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectedNativeDelegate (IntPtr inst);

		static void Selected_cb (IntPtr inst)
		{
			try {
				DockItem __obj = GLib.Object.GetObject (inst, false) as DockItem;
				__obj.OnSelected ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdl.DockItem), ConnectionMethod="OverrideSelected")]
		protected virtual void OnSelected ()
		{
			InternalSelected ();
		}

		private void InternalSelected ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static DeselectedNativeDelegate Deselected_cb_delegate;
		static DeselectedNativeDelegate DeselectedVMCallback {
			get {
				if (Deselected_cb_delegate == null)
					Deselected_cb_delegate = new DeselectedNativeDelegate (Deselected_cb);
				return Deselected_cb_delegate;
			}
		}

		static void OverrideDeselected (GLib.GType gtype)
		{
			OverrideDeselected (gtype, DeselectedVMCallback);
		}

		static void OverrideDeselected (GLib.GType gtype, DeselectedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "deselected", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DeselectedNativeDelegate (IntPtr inst);

		static void Deselected_cb (IntPtr inst)
		{
			try {
				DockItem __obj = GLib.Object.GetObject (inst, false) as DockItem;
				__obj.OnDeselected ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdl.DockItem), ConnectionMethod="OverrideDeselected")]
		protected virtual void OnDeselected ()
		{
			InternalDeselected ();
		}

		private void InternalDeselected ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static DockDragBeginNativeDelegate DockDragBegin_cb_delegate;
		static DockDragBeginNativeDelegate DockDragBeginVMCallback {
			get {
				if (DockDragBegin_cb_delegate == null)
					DockDragBegin_cb_delegate = new DockDragBeginNativeDelegate (DockDragBegin_cb);
				return DockDragBegin_cb_delegate;
			}
		}

		static void OverrideDockDragBegin (GLib.GType gtype)
		{
			OverrideDockDragBegin (gtype, DockDragBeginVMCallback);
		}

		static void OverrideDockDragBegin (GLib.GType gtype, DockDragBeginNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "dock-drag-begin", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DockDragBeginNativeDelegate (IntPtr inst);

		static void DockDragBegin_cb (IntPtr inst)
		{
			try {
				DockItem __obj = GLib.Object.GetObject (inst, false) as DockItem;
				__obj.OnDockDragBegin ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdl.DockItem), ConnectionMethod="OverrideDockDragBegin")]
		protected virtual void OnDockDragBegin ()
		{
			InternalDockDragBegin ();
		}

		private void InternalDockDragBegin ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static DockDragMotionNativeDelegate DockDragMotion_cb_delegate;
		static DockDragMotionNativeDelegate DockDragMotionVMCallback {
			get {
				if (DockDragMotion_cb_delegate == null)
					DockDragMotion_cb_delegate = new DockDragMotionNativeDelegate (DockDragMotion_cb);
				return DockDragMotion_cb_delegate;
			}
		}

		static void OverrideDockDragMotion (GLib.GType gtype)
		{
			OverrideDockDragMotion (gtype, DockDragMotionVMCallback);
		}

		static void OverrideDockDragMotion (GLib.GType gtype, DockDragMotionNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "dock-drag-motion", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DockDragMotionNativeDelegate (IntPtr inst, IntPtr device, int x, int y);

		static void DockDragMotion_cb (IntPtr inst, IntPtr device, int x, int y)
		{
			try {
				DockItem __obj = GLib.Object.GetObject (inst, false) as DockItem;
				__obj.OnDockDragMotion (GLib.Object.GetObject(device) as Gdk.Device, x, y);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdl.DockItem), ConnectionMethod="OverrideDockDragMotion")]
		protected virtual void OnDockDragMotion (Gdk.Device device, int x, int y)
		{
			InternalDockDragMotion (device, x, y);
		}

		private void InternalDockDragMotion (Gdk.Device device, int x, int y)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (4);
			GLib.Value[] vals = new GLib.Value [4];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (device);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (x);
			inst_and_params.Append (vals [2]);
			vals [3] = new GLib.Value (y);
			inst_and_params.Append (vals [3]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static DockDragEndNativeDelegate DockDragEnd_cb_delegate;
		static DockDragEndNativeDelegate DockDragEndVMCallback {
			get {
				if (DockDragEnd_cb_delegate == null)
					DockDragEnd_cb_delegate = new DockDragEndNativeDelegate (DockDragEnd_cb);
				return DockDragEnd_cb_delegate;
			}
		}

		static void OverrideDockDragEnd (GLib.GType gtype)
		{
			OverrideDockDragEnd (gtype, DockDragEndVMCallback);
		}

		static void OverrideDockDragEnd (GLib.GType gtype, DockDragEndNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "dock_drag_end", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DockDragEndNativeDelegate (IntPtr inst, bool cancelled);

		static void DockDragEnd_cb (IntPtr inst, bool cancelled)
		{
			try {
				DockItem __obj = GLib.Object.GetObject (inst, false) as DockItem;
				__obj.OnDockDragEnd (cancelled);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdl.DockItem), ConnectionMethod="OverrideDockDragEnd")]
		protected virtual void OnDockDragEnd (bool cancelled)
		{
			InternalDockDragEnd (cancelled);
		}

		private void InternalDockDragEnd (bool cancelled)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (cancelled);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static MoveFocusChildNativeDelegate MoveFocusChild_cb_delegate;
		static MoveFocusChildNativeDelegate MoveFocusChildVMCallback {
			get {
				if (MoveFocusChild_cb_delegate == null)
					MoveFocusChild_cb_delegate = new MoveFocusChildNativeDelegate (MoveFocusChild_cb);
				return MoveFocusChild_cb_delegate;
			}
		}

		static void OverrideMoveFocusChild (GLib.GType gtype)
		{
			OverrideMoveFocusChild (gtype, MoveFocusChildVMCallback);
		}

		static void OverrideMoveFocusChild (GLib.GType gtype, MoveFocusChildNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "move_focus_child", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveFocusChildNativeDelegate (IntPtr inst, int direction);

		static void MoveFocusChild_cb (IntPtr inst, int direction)
		{
			try {
				DockItem __obj = GLib.Object.GetObject (inst, false) as DockItem;
				__obj.OnMoveFocusChild ((Gtk.DirectionType) direction);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdl.DockItem), ConnectionMethod="OverrideMoveFocusChild")]
		protected virtual void OnMoveFocusChild (Gtk.DirectionType direction)
		{
			InternalMoveFocusChild (direction);
		}

		private void InternalMoveFocusChild (Gtk.DirectionType direction)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (direction);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_bind(IntPtr raw, IntPtr dock);

		public void Bind(Gtk.Widget dock) {
			gdl_dock_item_bind(Handle, dock == null ? IntPtr.Zero : dock.Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_dock_to(IntPtr raw, IntPtr target, int position, int docking_param);

		public void DockTo(Gdl.DockItem target, Gdl.DockPlacement position, int docking_param) {
			gdl_dock_item_dock_to(Handle, target == null ? IntPtr.Zero : target.Handle, (int) position, docking_param);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdl_dock_item_get_behavior_flags(IntPtr raw);

		public Gdl.DockItemBehavior BehaviorFlags { 
			get {
				int raw_ret = gdl_dock_item_get_behavior_flags(Handle);
				Gdl.DockItemBehavior ret = (Gdl.DockItemBehavior) raw_ret;
				return ret;
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_get_drag_area(IntPtr raw, IntPtr rect);

		public void GetDragArea(Gdk.Rectangle rect) {
			IntPtr native_rect = GLib.Marshaller.StructureToPtrAlloc (rect);
			gdl_dock_item_get_drag_area(Handle, native_rect);
			rect = (Gdk.Rectangle) Marshal.PtrToStructure (native_rect, typeof (Gdk.Rectangle));
			Marshal.FreeHGlobal (native_rect);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_item_get_grip(IntPtr raw);

		public Gtk.Widget Grip { 
			get {
				IntPtr raw_ret = gdl_dock_item_get_grip(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_item_get_tablabel(IntPtr raw);

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_set_tablabel(IntPtr raw, IntPtr tablabel);

		public Gtk.Widget Tablabel { 
			get {
				IntPtr raw_ret = gdl_dock_item_get_tablabel(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set {
				gdl_dock_item_set_tablabel(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_item_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdl_dock_item_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_hide_grip(IntPtr raw);

		public void HideGrip() {
			gdl_dock_item_hide_grip(Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_hide_item(IntPtr raw);

		public void HideItem() {
			gdl_dock_item_hide_item(Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_iconify_item(IntPtr raw);

		public void IconifyItem() {
			gdl_dock_item_iconify_item(Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_item_is_closed(IntPtr raw);

		public new bool IsClosed { 
			get {
				bool raw_ret = gdl_dock_item_is_closed(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_item_is_iconified(IntPtr raw);

		public bool IsIconified { 
			get {
				bool raw_ret = gdl_dock_item_is_iconified(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_item_is_placeholder(IntPtr raw);

		public bool IsPlaceholder { 
			get {
				bool raw_ret = gdl_dock_item_is_placeholder(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_lock(IntPtr raw);

		public void Lock() {
			gdl_dock_item_lock(Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_notify_deselected(IntPtr raw);

		public void NotifyDeselected() {
			gdl_dock_item_notify_deselected(Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_notify_selected(IntPtr raw);

		public void NotifySelected() {
			gdl_dock_item_notify_selected(Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_item_or_child_has_focus(IntPtr raw);

		public bool OrChildHasFocus() {
			bool raw_ret = gdl_dock_item_or_child_has_focus(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_preferred_size(IntPtr raw, IntPtr req);

		public void PreferredSize(Gtk.Requisition req) {
			IntPtr native_req = GLib.Marshaller.StructureToPtrAlloc (req);
			gdl_dock_item_preferred_size(Handle, native_req);
			req = Gtk.Requisition.New (native_req);
			Marshal.FreeHGlobal (native_req);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_set_behavior_flags(IntPtr raw, int behavior, bool clear);

		public void SetBehaviorFlags(Gdl.DockItemBehavior behavior, bool clear) {
			gdl_dock_item_set_behavior_flags(Handle, (int) behavior, clear);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_set_default_position(IntPtr raw, IntPtr reference);

		public Gdl.DockObject DefaultPosition { 
			set {
				gdl_dock_item_set_default_position(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_show_grip(IntPtr raw);

		public void ShowGrip() {
			gdl_dock_item_show_grip(Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_show_item(IntPtr raw);

		public void ShowItem() {
			gdl_dock_item_show_item(Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_unbind(IntPtr raw);

		public new void Unbind() {
			gdl_dock_item_unbind(Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_unlock(IntPtr raw);

		public void Unlock() {
			gdl_dock_item_unlock(Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_item_unset_behavior_flags(IntPtr raw, int behavior);

		public void UnsetBehaviorFlags(Gdl.DockItemBehavior behavior) {
			gdl_dock_item_unset_behavior_flags(Handle, (int) behavior);
		}

#endregion
	}
}
