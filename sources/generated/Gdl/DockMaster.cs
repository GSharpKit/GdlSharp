// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdl {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DockMaster : GLib.Object {

		public DockMaster (IntPtr raw) : base(raw) {}

		protected DockMaster() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("default-title")]
		public string DefaultTitle {
			get {
				GLib.Value val = GetProperty ("default-title");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("default-title", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("locked")]
		public int Locked {
			get {
				GLib.Value val = GetProperty ("locked");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("locked", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("switcher-style")]
		public Gdl.SwitcherStyle SwitcherStyle {
			get {
				GLib.Value val = GetProperty ("switcher-style");
				Gdl.SwitcherStyle ret = (Gdl.SwitcherStyle) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("switcher-style", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("tab-pos")]
		public Gtk.PositionType TabPos {
			get {
				GLib.Value val = GetProperty ("tab-pos");
				Gtk.PositionType ret = (Gtk.PositionType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("tab-pos", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("tab-reorderable")]
		public bool TabReorderable {
			get {
				GLib.Value val = GetProperty ("tab-reorderable");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("tab-reorderable", val);
				val.Dispose ();
			}
		}

		[GLib.Signal("layout-changed")]
		public event System.EventHandler LayoutChanged {
			add {
				this.AddSignalHandler ("layout-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("layout-changed", value);
			}
		}

		static LayoutChangedNativeDelegate LayoutChanged_cb_delegate;
		static LayoutChangedNativeDelegate LayoutChangedVMCallback {
			get {
				if (LayoutChanged_cb_delegate == null)
					LayoutChanged_cb_delegate = new LayoutChangedNativeDelegate (LayoutChanged_cb);
				return LayoutChanged_cb_delegate;
			}
		}

		static void OverrideLayoutChanged (GLib.GType gtype)
		{
			OverrideLayoutChanged (gtype, LayoutChangedVMCallback);
		}

		static void OverrideLayoutChanged (GLib.GType gtype, LayoutChangedNativeDelegate callback)
		{
			GdlDockMasterClass class_iface = GetClassStruct (gtype, false);
			class_iface.LayoutChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LayoutChangedNativeDelegate (IntPtr inst);

		static void LayoutChanged_cb (IntPtr inst)
		{
			try {
				DockMaster __obj = GLib.Object.GetObject (inst, false) as DockMaster;
				__obj.OnLayoutChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdl.DockMaster), ConnectionMethod="OverrideLayoutChanged")]
		protected virtual void OnLayoutChanged ()
		{
			InternalLayoutChanged ();
		}

		private void InternalLayoutChanged ()
		{
			LayoutChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).LayoutChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdlDockMasterClass {
			public LayoutChangedNativeDelegate LayoutChanged;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GdlDockMasterClass> class_structs;

		static GdlDockMasterClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdlDockMasterClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdlDockMasterClass class_struct = (GdlDockMasterClass) Marshal.PtrToStructure (class_ptr, typeof (GdlDockMasterClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdlDockMasterClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_master_add(IntPtr raw, IntPtr objekt);

		public void Add(Gdl.DockObject objekt) {
			gdl_dock_master_add(Handle, objekt == null ? IntPtr.Zero : objekt.Handle);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_master_get_controller(IntPtr raw);

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_master_set_controller(IntPtr raw, IntPtr new_controller);

		public Gdl.DockObject Controller { 
			get {
				IntPtr raw_ret = gdl_dock_master_get_controller(Handle);
				Gdl.DockObject ret = GLib.Object.GetObject(raw_ret) as Gdl.DockObject;
				return ret;
			}
			set {
				gdl_dock_master_set_controller(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_master_get_dock_name(IntPtr raw);

		public string DockName { 
			get {
				IntPtr raw_ret = gdl_dock_master_get_dock_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_master_get_object(IntPtr raw, IntPtr nick_name);

		public Gdl.DockObject GetObject(string nick_name) {
			IntPtr native_nick_name = GLib.Marshaller.StringToPtrGStrdup (nick_name);
			IntPtr raw_ret = gdl_dock_master_get_object(Handle, native_nick_name);
			Gdl.DockObject ret = GLib.Object.GetObject(raw_ret) as Gdl.DockObject;
			GLib.Marshaller.Free (native_nick_name);
			return ret;
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_master_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdl_dock_master_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_master_remove(IntPtr raw, IntPtr objekt);

		public void Remove(Gdl.DockObject objekt) {
			gdl_dock_master_remove(Handle, objekt == null ? IntPtr.Zero : objekt.Handle);
		}

#endregion
	}
}
