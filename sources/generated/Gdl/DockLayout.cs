// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdl {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DockLayout : GLib.Object {

		public DockLayout (IntPtr raw) : base(raw) {}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_layout_new(IntPtr master);

		public DockLayout (GLib.Object master) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DockLayout)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("master");
				vals.Add (new GLib.Value (master));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gdl_dock_layout_new(master == null ? IntPtr.Zero : master.Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_layout_get_master(IntPtr raw);

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_layout_set_master(IntPtr raw, IntPtr master);

		[GLib.Property ("master")]
		public GLib.Object Master {
			get  {
				IntPtr raw_ret = gdl_dock_layout_get_master(Handle);
				GLib.Object ret = GLib.Object.GetObject (raw_ret);
				return ret;
			}
			set  {
				gdl_dock_layout_set_master(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Property ("dirty")]
		public bool Dirty {
			get {
				GLib.Value val = GetProperty ("dirty");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdlDockLayoutClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GdlDockLayoutClass> class_structs;

		static GdlDockLayoutClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdlDockLayoutClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdlDockLayoutClass class_struct = (GdlDockLayoutClass) Marshal.PtrToStructure (class_ptr, typeof (GdlDockLayoutClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdlDockLayoutClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_layout_attach(IntPtr raw, IntPtr master);

		[Obsolete]
		public void Attach(Gdl.DockMaster master) {
			gdl_dock_layout_attach(Handle, master == null ? IntPtr.Zero : master.Handle);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_layout_delete_layout(IntPtr raw, IntPtr name);

		public void DeleteLayout(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gdl_dock_layout_delete_layout(Handle, native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_layout_get_layouts(IntPtr raw, bool include_default);

		public GLib.List GetLayouts(bool include_default) {
			IntPtr raw_ret = gdl_dock_layout_get_layouts(Handle, include_default);
			GLib.List ret = new GLib.List(raw_ret);
			return ret;
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_layout_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdl_dock_layout_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_layout_is_dirty(IntPtr raw);

		public bool IsDirty { 
			get {
				bool raw_ret = gdl_dock_layout_is_dirty(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_layout_load_from_file(IntPtr raw, IntPtr filename);

		public bool LoadFromFile(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			bool raw_ret = gdl_dock_layout_load_from_file(Handle, native_filename);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_layout_load_layout(IntPtr raw, IntPtr name);

		public bool LoadLayout(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = gdl_dock_layout_load_layout(Handle, native_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_layout_save_layout(IntPtr raw, IntPtr name);

		public void SaveLayout(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gdl_dock_layout_save_layout(Handle, native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdl_dock_layout_save_to_file(IntPtr raw, IntPtr filename);

		public bool SaveToFile(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			bool raw_ret = gdl_dock_layout_save_to_file(Handle, native_filename);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

#endregion
	}
}
