// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdl {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Dock : Gdl.DockObject {

		public Dock (IntPtr raw) : base(raw) {}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_new();

		public Dock () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Dock)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gdl_dock_new();
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_new_from(IntPtr original, bool floating);

		public Dock (Gdl.Dock original, bool floating) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Dock)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (original != null) {
					names.Add ("floating");
					vals.Add (new GLib.Value (floating));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gdl_dock_new_from(original == null ? IntPtr.Zero : original.Handle, floating);
		}

		[GLib.Property ("floating")]
		public bool Floating {
			get {
				GLib.Value val = GetProperty ("floating");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("default-title")]
		public string DefaultTitle {
			get {
				GLib.Value val = GetProperty ("default-title");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("default-title", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("width")]
		public int Width {
			get {
				GLib.Value val = GetProperty ("width");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("width", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("height")]
		public int Height {
			get {
				GLib.Value val = GetProperty ("height");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("height", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("floatx")]
		public int Floatx {
			get {
				GLib.Value val = GetProperty ("floatx");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("floatx", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("floaty")]
		public int Floaty {
			get {
				GLib.Value val = GetProperty ("floaty");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("floaty", val);
				val.Dispose ();
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_set_skip_taskbar(IntPtr raw, bool skip);

		[GLib.Property ("skip-taskbar")]
		public bool SkipTaskbar {
			get {
				GLib.Value val = GetProperty ("skip-taskbar");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gdl_dock_set_skip_taskbar(Handle, value);
			}
		}

		[GLib.Signal("layout-changed")]
		public event System.EventHandler LayoutChanged {
			add {
				this.AddSignalHandler ("layout-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("layout-changed", value);
			}
		}

		static LayoutChangedNativeDelegate LayoutChanged_cb_delegate;
		static LayoutChangedNativeDelegate LayoutChangedVMCallback {
			get {
				if (LayoutChanged_cb_delegate == null)
					LayoutChanged_cb_delegate = new LayoutChangedNativeDelegate (LayoutChanged_cb);
				return LayoutChanged_cb_delegate;
			}
		}

		static void OverrideLayoutChanged (GLib.GType gtype)
		{
			OverrideLayoutChanged (gtype, LayoutChangedVMCallback);
		}

		static void OverrideLayoutChanged (GLib.GType gtype, LayoutChangedNativeDelegate callback)
		{
			GdlDockClass class_iface = GetClassStruct (gtype, false);
			class_iface.LayoutChanged = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LayoutChangedNativeDelegate (IntPtr inst);

		static void LayoutChanged_cb (IntPtr inst)
		{
			try {
				Dock __obj = GLib.Object.GetObject (inst, false) as Dock;
				__obj.OnLayoutChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gdl.Dock), ConnectionMethod="OverrideLayoutChanged")]
		protected virtual void OnLayoutChanged ()
		{
			InternalLayoutChanged ();
		}

		private void InternalLayoutChanged ()
		{
			LayoutChangedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).LayoutChanged;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdlDockClass {
			public LayoutChangedNativeDelegate LayoutChanged;
		}

		static uint class_offset = ((GLib.GType) typeof (Gdl.DockObject)).GetClassSize ();
		static Dictionary<GLib.GType, GdlDockClass> class_structs;

		static GdlDockClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdlDockClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdlDockClass class_struct = (GdlDockClass) Marshal.PtrToStructure (class_ptr, typeof (GdlDockClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdlDockClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_add_floating_item(IntPtr raw, IntPtr item, int x, int y, int width, int height);

		public void AddFloatingItem(Gdl.DockItem item, int x, int y, int width, int height) {
			gdl_dock_add_floating_item(Handle, item == null ? IntPtr.Zero : item.Handle, x, y, width, height);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_add_item(IntPtr raw, IntPtr item, int placement);

		public void AddItem(Gdl.DockItem item, Gdl.DockPlacement placement) {
			gdl_dock_add_item(Handle, item == null ? IntPtr.Zero : item.Handle, (int) placement);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_get_item_by_name(IntPtr raw, IntPtr name);

		public Gdl.DockItem GetItemByName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gdl_dock_get_item_by_name(Handle, native_name);
			Gdl.DockItem ret = GLib.Object.GetObject(raw_ret) as Gdl.DockItem;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_get_named_items(IntPtr raw);

		public GLib.List NamedItems { 
			get {
				IntPtr raw_ret = gdl_dock_get_named_items(Handle);
				GLib.List ret = new GLib.List(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_get_placeholder_by_name(IntPtr raw, IntPtr name);

		[Obsolete]
		public Gdl.DockPlaceholder GetPlaceholderByName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gdl_dock_get_placeholder_by_name(Handle, native_name);
			Gdl.DockPlaceholder ret = GLib.Object.GetObject(raw_ret) as Gdl.DockPlaceholder;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_get_root(IntPtr raw);

		public Gdl.DockObject Root { 
			get {
				IntPtr raw_ret = gdl_dock_get_root(Handle);
				Gdl.DockObject ret = GLib.Object.GetObject(raw_ret) as Gdl.DockObject;
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdl_dock_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_hide_preview(IntPtr raw);

		public void HidePreview() {
			gdl_dock_hide_preview(Handle);
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_param_get_type();

		public static GLib.GType ParamGetType() {
			IntPtr raw_ret = gdl_dock_param_get_type();
			GLib.GType ret = new GLib.GType(raw_ret);
			return ret;
		}

		[DllImport("libgdl-3-5.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdl_dock_show_preview(IntPtr raw, IntPtr rect);

		public void ShowPreview(Gdk.Rectangle rect) {
			IntPtr native_rect = GLib.Marshaller.StructureToPtrAlloc (rect);
			gdl_dock_show_preview(Handle, native_rect);
			Marshal.FreeHGlobal (native_rect);
		}

#endregion
	}
}
