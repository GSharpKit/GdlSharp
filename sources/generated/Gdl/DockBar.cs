// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdl {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class DockBar : Gtk.Box {

		public DockBar (IntPtr raw) : base(raw) {}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_bar_new(IntPtr master);

		public DockBar (GLib.Object master) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DockBar)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("master");
				vals.Add (new GLib.Value (master));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gdl_dock_bar_new(master == null ? IntPtr.Zero : master.Handle);
		}

		[GLib.Property ("master")]
		public GLib.Object Master {
			get {
				GLib.Value val = GetProperty ("master");
				GLib.Object ret = (GLib.Object) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("master", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("dockbar-style")]
		public Gdl.DockBarStyle DockbarStyle {
			get {
				GLib.Value val = GetProperty ("dockbar-style");
				Gdl.DockBarStyle ret = (Gdl.DockBarStyle) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("dockbar-style", val);
				val.Dispose ();
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GdlDockBarClass {
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Box)).GetClassSize ();
		static Dictionary<GLib.GType, GdlDockBarClass> class_structs;

		static GdlDockBarClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GdlDockBarClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GdlDockBarClass class_struct = (GdlDockBarClass) Marshal.PtrToStructure (class_ptr, typeof (GdlDockBarClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GdlDockBarClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgdl-3.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdl_dock_bar_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdl_dock_bar_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
